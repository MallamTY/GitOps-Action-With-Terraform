name: "Github Action With Terraform"
on: #What should cause this workflow/pipeline to get triggered
  push:
    branches:
      - main
      - staging
    paths:
      - terraform/**
  
  pull_request:
    branches:
      - main
    paths:
    - terraform/**


env:
  #Specified credentials which will be use by the workflow/pipeline for depployment. This credentials must have been stored in the secret&variabel section of the repository settings.

  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  EKS_CLUSTER: The_eks_cluster_name_specified_in_the_terraform_code

  #For storing the terraform state file for synchronisation of the state of the infrastructures provisioned by the workflow/pipeline.

  BUCKET_TF_STATE: ${{ secrets.BUCKET_NAME }}

jobs:
  terraform:
    name: "Terraform code changes executor"
    runs-on: ubuntu-latest #This specifies the runner to be used by github actions. Runners are like containers (An operating system in this case) on which the job should be executed.
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
      
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

    #This step uses the github action in the market place to setup terraform (install terraform) on the runner

      - name: Setup terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        #with:
          #terraform-version:1.6.3

      - name: Terraform Initialisation
        id: init
        run: terraform init backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform file formating
        id: fmt
        run: terraform fmt -check #This line returns a non-zero exit code is the formating isn't correct and then halt the deployment process

      - name: Terraform Validation
        id: validate
        run: terraform validate

      - name: Terraform Planning
        id: plan
        run: terraform plan -no-color -input-false -output planfile
        continue-on-error: true

      - name: Terraform plan status checker
        if: steps.plan.outcome == 'failure'
        run: exit 1

